[
{
	"uri": "https://bioinformatics.netlify.com/start/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": " Software Installation Required software depends on the Operational System that you have installed on your personal computer. Since we will be working in the OSU High Performance Computing Center (HPC), we need a terminal access.\n Windows Since windows does not have a bash terminal to create ssh connections. We are required to install Putty in all windows systems. To install Putty you need to download its latest version. Please follow all the installation guidelines on the installation prompt.\n Mac Mac has a default terminal client that includes Bash. Therefore, there is no need to install any extra software.\n Linux Linux has a default terminal client that includes bash. If you are using linux, you do not need anything installed for this class.\nInstallation of the software and guidelines will be given during a pre-workshop meeting. Please raise your hand if you did not attend to the pre-workshop meeting.\n"
},
{
	"uri": "https://bioinformatics.netlify.com/morning/links/",
	"title": "Resources for new users",
	"tags": [],
	"description": "",
	"content": "There are so many resources available for free online! Here, I am sharing the websites that were very useful for me when I was starting out:\nHPCC new user tutorial: https://hpcc.okstate.edu/sites/default/files/Files/tutorial.pdf\nHPCC Education Resources: https://hpcc.okstate.edu/content/hpc-education-resources\nData Carpentry website http://www.datacarpentry.org\nOSU offers Data Carpentry Workshops every semester (they are free, go take them whenever you can!)\nDataCamp shell: https://www.learnshell.org\nUnix for begginers: http://www.ee.surrey.ac.uk/Teaching/Unix/\nUnix cheat sheet: https://files.fosswire.com/2007/08/fwunixref.pdf\n\u0026lsquo;Awk\u0026rsquo; cheat sheet for fasta manipulation: https://www.cheatography.com/melissamlwong/cheat-sheets/awk-one-liners-for-fasta-manipulation-version-1-0/\nBioStar forum: https://www.biostars.org\n"
},
{
	"uri": "https://bioinformatics.netlify.com/afternoon/terminology/",
	"title": "Terminology",
	"tags": [],
	"description": "",
	"content": " We will be using examples associated with genomic analyses in bioinformatics, therefore, it is important for you to become familiar with the following terms.\nWhat is a read? A read is a string of bases represented by their one letter codes. Here is an example of a read that is 100 bases long. TTAACCTTGGTTTTGAACTTGAACACTTAGGGGATTGAAGATTCAACAACCCTAAAGCTTGGGGTAAAACCTTAGGGGAT\nWhat is a contig? A contig is the consensus sequence generated by aligning reads to themselves.\n  Alignment and Consensus   The last line is the consensus of the aligned reads which we call a contig.\nWhat is a scaffold? A scaffold is a set of contigs that have been ordered and oriented based on mate pair or long distance information. Usually there are large gaps found between contigs. New sequencing technologies are helping to close those gaps.\nWhat is a chromosome? Chromosomes are the largest DNA molecules in the cell. Scaffolds can be ordered and oriented using a genetic map or HiC data into linkage groups or chromosomes. The ultimate goal of a genome assembly project is to assemble reads into chromosomes.\nNext Generation Sequencing Next-generation sequencing generates masses of DNA sequence data that\u0026rsquo;s richer and more complete than is imaginable with Sanger sequencing. Illumina sequencing systems can deliver data output ranging from 300 kilobases up to multiple terabases in a single run, depending on instrument type and configuration.\nSequence Assembly Sequence assembly refers to aligning and merging fragments from a longer DNA sequence in order to reconstruct the original sequence. The assembly can be found at different stages of completion. It could be conting, scaffold or even chromosome level.\nSequence Annotation DNA annotation or genome annotation is the process of identifying the locations of genes and all of the coding regions in a genome and determining what those genes do.   Genes and Genome   What is a genome? A genome is an organism\u0026rsquo;s complete set of DNA, including all of its genes. Most of the genomes available online have been partially assembled. We will find out how to retrieve these genomes and analyze them.\n We will practice with other researcher\u0026rsquo;s data to become a pro. Then we can analyze our own data.\n "
},
{
	"uri": "https://bioinformatics.netlify.com/afternoon/data_acquisition/",
	"title": "Data Acquisition",
	"tags": [],
	"description": "",
	"content": " Contents  Introduction Back to the terminal Retrieving my first ftp file Filtering Data Loops and variables in Linux Task 1 Task 2  Intro [back to top]\nWhile using coding and bioinformatics, we want to avoid using graphical user interphases (GUIs) as much as we can. Can somebody answer why?\n Visualizing large datasets (as the ones that we are going to download) could be practically impossible. Opening the whole document will likely crash your computer.\n  However, there are exceptions, where we already know the data structure of a file and we can start running codes on it.\nNCBI which stands for the The National Center for Biotechnology Information helps bioinformaticians by providing access to biomedical and genomic information. This is a GUI which helps people search and process data. This is given the fact that the data has been previously curated by others.\nThey also have access to an FTP site, where we can download files in bulk. Usually, exploring these folders become difficult, therefore, they create summary files that we can play with.\nLet\u0026rsquo;s start by downloading the assembly_summary_genbank.txt from the NCBI FTP site at ftp://ftp.ncbi.nlm.nih.gov/genomes/ASSEMBLY_REPORTS/. If you click on this site link the directory content should look something like this:\n. ├── [ 30] README_assembly_summary.txt -\u0026gt; ../README_assembly_summary.txt ├── [ 27] README_change_notice.txt -\u0026gt; ../README_change_notice.txt ├── [ 22K] species_genome_size.txt.gz ├── [ 31M] ANI_report_bacteria.txt ├── [2.2M] assembly_summary_genbank_historical.txt ├── [ 46M] assembly_summary_genbank.txt ├── [2.4M] assembly_summary_refseq_historical.txt └── [ 34M] assembly_summary_refseq.txt  Back to the terminal [back to top]\nCreate a new folder in your /scratch/username directory named afternoon and move inside the afternoon folder:\n$ mkdir afternoon $ cd afternoon  Let\u0026rsquo;s make sure that you are in the correct directory by typing pwd\n$ pwd  you should get something like this:\n/scratch/asecas86/afternoon   My username is asecas86 (you already learned this)\n Now, let us retrieve the assembly_summary_genbank.txt\nRetrieving my first ftp file [back to top]\n$ wget ftp://ftp.ncbi.nlm.nih.gov/genomes/ASSEMBLY_REPORTS/assembly_summary_genbank.txt  --2018-03-04 22:46:48-- ftp://ftp.ncbi.nlm.nih.gov/genomes/ASSEMBLY_REPORTS/assembly_summary_genbank.txt =\u0026gt; “assembly_summary_genbank.txt” Resolving ftp.ncbi.nlm.nih.gov... 165.112.9.229, 2607:f220:41e:250::7 Connecting to ftp.ncbi.nlm.nih.gov|165.112.9.229|:21... connected. Logging in as anonymous ... Logged in! ==\u0026gt; SYST ... done. ==\u0026gt; PWD ... done. ==\u0026gt; TYPE I ... done. ==\u0026gt; CWD (1) /genomes/ASSEMBLY_REPORTS ... done. ==\u0026gt; SIZE assembly_summary_genbank.txt ... 48113668 ==\u0026gt; PASV ... done. ==\u0026gt; RETR assembly_summary_genbank.txt ... done. Length: 48113668 (46M) (unauthoritative) 100%[=====================================================================================================================================\u0026gt;] 48,113,668 11.1M/s in 8.4s  Let\u0026rsquo;s verify that that the file is present\n$ ls -lth  total 52M -rw------- 1 asecas86 clusterusers 46M Mar 4 22:46 assembly_summary_genbank.txt  Let\u0026rsquo;s explore the head of the file\n$ head -n 2 assembly_summary_genbank.txt  # See ftp://ftp.ncbi.nlm.nih.gov/genomes/README_assembly_summary.txt for a description of the columns in this file. # assembly_accession bioproject biosample wgs_master refseq_category taxid species_taxid organism_name infraspecific_name isolate version_status assembly_level release_type genome_rep seq_rel_date asm_name submitter gbrs_paired_asm paired_asm_comp ftp_path excluded_from_refseq relation_to_type_material GCA_000001215.4 PRJNA13812 SAMN02803731 reference genome 7227 7227 Drosophila melanogaster latest Chromosome Major Full 2014/08/01 Release 6 plus ISO1 MT The FlyBase Consortium/Berkeley Drosophila Genome Project/Celera Genomics GCF_000001215.4 identical ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/215/GCA_000001215.4_Release_6_plus_ISO1_MT  Can we make sense of the data from here? Really difficult to tell right??? That\u0026rsquo;s why it is important to ALWAYS CREATE A README FILE.\nLet\u0026rsquo;s take a peek at their README_assembly_summary.txt.\n$ wget ftp://ftp.ncbi.nlm.nih.gov/genomes/ASSEMBLY_REPORTS/README_assembly_summary.txt  nano is utilized to edit files. However, we just want to read the file so let\u0026rsquo;s use less\n$ less README_assembly_summary.txt  Keep pushing enter until you reach the end of the document and tell me what information about their ftp archives can be recovered and are useful. Take notes of what information we can get on each column.\nPush Q to quit watching the readme file. Filtering Data [back to top]\nLet\u0026rsquo;s focus on our organism of interest Aspergillus flavus. Let\u0026rsquo;s try searching for our pathogen in the database:\n$ grep \u0026quot;aspergillus flavus\u0026quot; assembly_summary_genbank.txt  What did you get as output from the previous code? NOTHING? HOW COME??\nTry this\n$ grep -i \u0026quot;aspergillus flavus\u0026quot; assembly_summary_genbank.txt  Take 1 minute to understand why this happened You are right, this is because you added the -i argument which asks for case insensitive\n Let\u0026rsquo;s count how many entries for Aspergillus flavus we have and at the same time let\u0026rsquo;s redirect our entries to a file named aspergillus_assemblies.txt  $ grep -ic \u0026quot;aspergillus flavus\u0026quot; assembly_summary_genbank.txt $ grep -i \u0026quot;aspergillus flavus\u0026quot; assembly_summary_genbank.txt \u0026gt; aspergillus_assemblies.txt  17  We do have 17 assemblies of Aspergillus flavus available in this FTP site. Guess what, not all of them are of importance to us. I want only assemblies at the chromosome level. Remember that there can be different types of assembly levels See above. We want to sort by column to select those Chromosomal assemblies (if any). Now that we have retrieved data we will learn how to filter by column in the next session.\nWell, let me introduce you to the beautiful awk (We will be seeing more of awk under Regular Expressions)\n$ awk -F'\\t' '$12 == \u0026quot;Chromosome\u0026quot;' aspergillus_assemblies.txt | wc -l   0  Can somebody tell me what are we doing with the above code?\nWe are piping the output of awk to a wc command that is the famous word count. You can count how many lines are found in a file with wc -l.\nUnfortunately, we have 0 crhomosomal assemblies. Now let\u0026rsquo;s try Scaffolds.\nLoops and variables in Linux [back to top]\nAssigning values to variables is really easy, just type the following:\na=\u0026quot;Andres\u0026quot;  Now if you want to retrieve your variable and print it to the prompt do the following.\necho $a  For the next task you need to know how loops work in linux.\nLet\u0026rsquo;s try some, but first let\u0026rsquo;s get some variables assigned\na=\u0026quot;like\u0026quot; b=\u0026quot;this\u0026quot; c=\u0026quot;workshop\u0026quot;  for i in $a $b $c do echo $i done   TASK 1: [back to top]\nComplete the following tab-delimited table with information about how many assemblies are at the chromosome, scaffold and contig level. The table must look something like this:\n   Assembly level Number of assemblies     Chromosome 0   Scaffold \u0026ndash;   Contig \u0026ndash;    HINT: You can create a for loop\n  Solution 1 First we need to know which list will be used in our for loop. In this case I want a list of Chromosome, Scaffold and Contig. Then you create the loop like so:\nfor i in Chromosome Scaffold Contig do assemblies=`awk -v var=\u0026quot;$i\u0026quot; -F'\\t' '$12 == Chromosome' aspergillus_assemblies.txt | wc -l` echo -e $i'\\t'$assemblies \u0026gt;\u0026gt; table_assemblies.txt echo -e $i'\\t'$assemblies done  Did you really try to only copy and paste the loop and got an error? Try harder\u0026hellip;.. Focus on the var\nThe result should look something like this:\n[asecas86@n252 afternoon]$ for i in Chromosome Scaffold Contig \u0026gt; do \u0026gt; assemblies=`awk -v var=\u0026quot;$i\u0026quot; -F'\\t' '$12 == var' aspergillus_assemblies.txt | wc -l` \u0026gt; echo -e $i ' \\t ' $assemblies \u0026gt;\u0026gt; table_assemblies.txt \u0026gt; echo -e $i ' \\t ' $assemblies \u0026gt; done Chromosome 0 Scaffold 5 Contig 12  Let us retrieve only the best assemblies, in this case lets select Scaffolds\n$ awk -F'\\t' '$12 == \u0026quot;Scaffold\u0026quot;' aspergillus_assemblies.txt \u0026gt; chr_aspergillus_assemblies.txt  Let\u0026rsquo;s check those 5 entries by using head\n$ head chr_aspergillus_assemblies.txt  I want to get the ftp address to download those files.\n$ awk -F'\\t' '{print $20}' chr_aspergillus_assemblies.txt \u0026gt; ftp-ids.txt  and finally check if you got the five ftp addresses.\n$ less ftp-ids.txt  We want to compare these five genomes. Therefore, we want to get the genome files and the annotation files (fasta and gff or gtf)\nYou can open one of the files to explore the directory, for example, let\u0026rsquo;s explore this: ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/002/443/195/GCA_002443195.1_AflaGuard\n  There are multiple files inside this directory, we are interested in .fna and gff or gtf files. Let\u0026rsquo;s target those files with a wildcard and a while loop.\nFirst let\u0026rsquo;s make a dir for the genomes and annotations that we will retrieve:\n$ mkdir genomes  Now finally let us retrieve those files with the following loop:\nVery important note: Make sure that the space between wget -P genome/ and $p/*.fna.gz is present, otherwise wget will not work. Can you guess why??\nwhile read p; do echo $p wget -P genomes/ $p/*.fna.gz done \u0026lt;ftp-ids.txt  Now check what files you downloaded:\n$ ls -lth genomes/  total 77M -r--r--r-- 1 asecas86 clusterusers 12M Jan 5 22:21 GCA_002864195.1_ASM286419v1_genomic.fna.gz -r--r--r-- 1 asecas86 clusterusers 11M Dec 14 01:09 GCA_002456175.1_AF36_genomic.fna.gz -r--r--r-- 1 asecas86 clusterusers 12M Nov 17 11:31 GCA_002443215.1_K49_genomic.fna.gz -r--r--r-- 1 asecas86 clusterusers 11M Nov 17 11:29 GCA_002443195.1_AflaGuard_genomic.fna.gz -r--r--r-- 1 asecas86 clusterusers 5.9M Nov 13 05:26 GCA_000006275.2_JCVI-afl1-v2.0_cds_from_genomic.fna.gz -r--r--r-- 1 asecas86 clusterusers 5.9M Nov 13 05:26 GCA_000006275.2_JCVI-afl1-v2.0_rna_from_genomic.fna.gz -r--r--r-- 1 asecas86 clusterusers 12M Jun 16 2016 GCA_000006275.2_JCVI-afl1-v2.0_genomic.fna.gz  you should have 5 files, why do we have 7?\nThis is because these folders contain all information about annotations and sometimes they include CDS which stand for coding regions or rna which are regions that were mapped to the genome using its transcripts. It seems like the only one that has this issue is JCVI assembly.\nFile compression Most files in bioinformatics are compressed to allow fast sharing, otherwise they can weight many Gigabytes. The most common compression that you will find online is .gz. The best way to uncompress this type of files is by typing gunzip *.gz\nWe can try that with a loop\n$ cd genomes  for i in *.gz do echo \u0026quot;Unzipping $i\u0026quot; gunzip $i done  DONE, now you have fasta files to analyze. And this is the way you retrieve data in bulk from ftp sites. Notice that the directory size increased to 247 MB.\ntotal 247M -r--r--r-- 1 asecas86 clusterusers 37M Jan 5 22:21 GCA_002864195.1_ASM286419v1_genomic.fna -r--r--r-- 1 asecas86 clusterusers 36M Dec 14 01:09 GCA_002456175.1_AF36_genomic.fna -r--r--r-- 1 asecas86 clusterusers 36M Nov 17 11:31 GCA_002443215.1_K49_genomic.fna -r--r--r-- 1 asecas86 clusterusers 36M Nov 17 11:29 GCA_002443195.1_AflaGuard_genomic.fna -r--r--r-- 1 asecas86 clusterusers 20M Nov 13 05:26 GCA_000006275.2_JCVI-afl1-v2.0_cds_from_genomic.fna -r--r--r-- 1 asecas86 clusterusers 20M Nov 13 05:26 GCA_000006275.2_JCVI-afl1-v2.0_rna_from_genomic.fna -r--r--r-- 1 asecas86 clusterusers 36M Jun 16 2016 GCA_000006275.2_JCVI-afl1-v2.0_genomic.fna   TASK 2 [back to top]\nDownload all the gff or gtf files associated to these five genomes and put them in a folder called annotations HINT: use mkdir annotations in your afternoon directory\n  Solution 2 $ mkdir ../annotations  What would you change in the following code to get gff files\nVery important note: Make sure that the space between wget -P annotations/ and $p/*.gff.gz is present, otherwise wget will not work. Can you guess why??\nwhile read p; do echo $p wget -P annotations/ $p/*.fna.gz done \u0026lt;ftp-ids.txt  You will not get a single cup of coffee if you do not solve this loop as expected.   What about this Solution?? (Think twice before copying and pasting this one):\np=\u0026quot;u r 2 Lazy\u0026quot; for i in {1..100} do echo $p $i \u0026quot;Times\u0026quot; done  Ok try the loop with gff but first:\n$ cd ..  Then: Very important note: Make sure that the space between wget -P annotations/ and $p/*.gff.gz is present, otherwise wget will not work. Can you guess why??\nwhile read p; do echo $p wget -P annotations/ $p/*.gff.gz done \u0026lt;ftp-ids.txt  Let\u0026rsquo;s see what we got:\n$ ls -lth annotations/  total 3.0M -r--r--r-- 1 asecas86 clusterusers 4.2K Jan 5 22:21 GCA_002864195.1_ASM286419v1_genomic.gff.gz -r--r--r-- 1 asecas86 clusterusers 3.3K Dec 14 01:09 GCA_002456175.1_AF36_genomic.gff.gz -r--r--r-- 1 asecas86 clusterusers 3.3K Nov 17 11:31 GCA_002443215.1_K49_genomic.gff.gz -r--r--r-- 1 asecas86 clusterusers 3.1K Nov 17 11:29 GCA_002443195.1_AflaGuard_genomic.gff.gz -r--r--r-- 1 asecas86 clusterusers 2.3M Nov 13 05:26 GCA_000006275.2_JCVI-afl1-v2.0_genomic.gff.gz  Uncompress:\n$ cd annotations  and finally\nfor i in *.gz do echo \u0026quot;Unzipping $i\u0026quot; gunzip $i done  Check what you got:\n$ ls -lth  You should have 5 files. If you have more or less, then you did something wrong!\ntotal 29M -r--r--r-- 1 asecas86 clusterusers 47K Jan 5 22:21 GCA_002864195.1_ASM286419v1_genomic.gff -r--r--r-- 1 asecas86 clusterusers 31K Dec 14 01:09 GCA_002456175.1_AF36_genomic.gff -r--r--r-- 1 asecas86 clusterusers 32K Nov 17 11:31 GCA_002443215.1_K49_genomic.gff -r--r--r-- 1 asecas86 clusterusers 29K Nov 17 11:29 GCA_002443195.1_AflaGuard_genomic.gff -r--r--r-- 1 asecas86 clusterusers 26M Nov 13 05:26 GCA_000006275.2_JCVI-afl1-v2.0_genomic.gff  In the upcoming modules you will learn how to iterate through the files that we just downloaded to compare basic metrics. Now, please get some fresh air.\n[back to top]\n"
},
{
	"uri": "https://bioinformatics.netlify.com/morning/cowboy/",
	"title": "Introduction to the Cowboy",
	"tags": [],
	"description": "",
	"content": " Filesystem is a term that describes how data in arranged on a computer. It\u0026rsquo;s made out of directories and files. Directory = folder.\nPrompt $ or % indicates command-line = computer is waiting for your command\nDirectories and files have an \u0026ldquo;address\u0026rdquo;, which is called path.\nTypes of paths:\n Absolute path starts with \u0026lsquo;/\u0026rsquo; that indicate it starts from the root directory (where it all begins) Relative path is relative to our current working directory (from this point forward)  In the Cowboy:\nEach user has 2 private directories: /home and /scratch. Nothing backed up!\n Your /home has 25Gb storage quota. The home directory is also written as ~.\n Your /scratch is for large files, space is \u0026ldquo;unlimited\u0026rdquo; and shared.\n  The /opt is a shared directory that contains the applications (aka programs).\nWhen you log in, you are automatically in your /home, which is located in one of the login nodes.\nIn the login nodes, you only can use unix commands to edit and manipulate files and scripts. If you want to run a job or a script, you must use the batch scheduler.\nThe batch scheduler receives your job, then puts it in the queue to be executed in a computer node. Once your job finishes, the scheduler sends the results back to your log in folder.\nAny questions? "
},
{
	"uri": "https://bioinformatics.netlify.com/morning/",
	"title": "Morning Session",
	"tags": [],
	"description": "",
	"content": " Introduction Learning how to work your way around a command-line interface is the starting point of your bioinformatics journey. In this session, you\u0026rsquo;ll learn basic and advanced Unix commands that programmers and bioinformaticians use very often.\nI want to share some resources that might be useful to your future pratice. Click here if you are interested.\nI want to give you a little pep talk before you dive into the lectures:\n You\u0026rsquo;ll only learn by doing it! So practice, practice, and practice\u0026hellip; I mean practice a lot! There are many ways to do the same thing and achieve the same results. Treat your code as experiments. Write one line, test run it for easy debugging. Errors are not bad! Often, errors point you to the right direction. If you don\u0026rsquo;t know, ask Google!  Warm up your finger tips, my friends! Let\u0026rsquo;s log in and get started!!\n"
},
{
	"uri": "https://bioinformatics.netlify.com/afternoon/",
	"title": "Afternoon Session",
	"tags": [],
	"description": "",
	"content": " Basic Scripting and real life exercises  \u0026ldquo;Every expert was once a beginner\u0026rdquo; Helen Hayes  The best way to learn bioinformatics is through examples of real world problems. This section assumes that you have some knowledge of biology and basic understanding of the Unix command line (now that you have taken the morning section). In this section you will learn every day bioinformatic exercises. We will divide the afternoon section into three portions.\n   Hours Activity     1:00 pm - 1:30 pm Introduction to Bioinformatics Terminology   1:30 pm - 2:30 pm Data Acquisition   2:30 pm - 3:00 pm Regular Expressions   3:00 pm - 3:30 pm My first script   3:30 pm - 4:00 pm Script versions with GIT    "
},
{
	"uri": "https://bioinformatics.netlify.com/afternoon/regex/",
	"title": "Regular expressions",
	"tags": [],
	"description": "",
	"content": " Contents  Intro Basic awk Identifying patterns in fasta files with awk Task 3 Task 4 Annotation files and awk Task 5 Extras with gff files  Intro [back to top]\nA regular expression, regex or regexp (sometimes called a rational expression) is, in theoretical computer science and formal language theory, a sequence of characters that define a search pattern. Usually this pattern is then used by string searching algorithms for \u0026ldquo;find\u0026rdquo; or \u0026ldquo;find and replace\u0026rdquo; operations on strings.\nMultiple tools in LINUX can be utilized to find regular expressions. The most common one is grep which you already used during the morning.\nNow there are a couple of more powerful tools that work with regular expressions, these are awk and sed.\nFor example: the most basic awk command looks like this:\n$ awk '/pattern/{ print $0 }' file  Let\u0026rsquo;s move to one of our afternoon directories.\n$ cd /scratch/asecas86/afternoon  Basic awk [back to top]\nWe will be using basic awk with our fna and gff files. Lets start with fna files.\nLet\u0026rsquo;s move to genomes\n$ cd genomes  Now select the following file: GCA_002443195.1_AflaGuard_genomic.fna and run the following command:\n$ awk '/NNNNN/{ print $0 }' GCA_002443195.1_AflaGuard_genomic.fna  Pretty nasty output. We must linearize first the fasta files. There is this very helpful script that linearizes any fasta file. Let\u0026rsquo;s download it first.\n$ wget --no-check-certificate https://raw.githubusercontent.com/andrese52/Training_datasets_scripting/master/scripts/linearize.sh  Let\u0026rsquo;s check how many lines GCA_002443195.1_AflaGuard_genomic.fna has prior linearizing it.\n$ wc -l GCA_002443195.1_AflaGuard_genomic.fna  453747 GCA_002443195.1_AflaGuard_genomic.fna  Run the script as follows:\n$ bash linearize.sh GCA_002443195.1_AflaGuard_genomic.fna  This script manipulates the fasta file and just reformats it to have the following format:\n\u0026gt;seq1 ATCCCCCCC \u0026gt;seq2 ATCTCTCT  Once the file is linearized, count the lines again like so:\n$ wc -l linearized_GCA_002443195.1_AflaGuard_genomic.fna  196 linearized_GCA_002443195.1_AflaGuard_genomic.fna  BOOM!! You have linearized a .fasta file. This is very helpful to manipulate the file and get metrics and regular expressions.\nLet\u0026rsquo;s make sure the file was correctly linearized by counting the number of fasta headers in the original file. The count should give 196\u0026frasl;2 = 98. Let\u0026rsquo;s check!!\n$ grep -c \u0026quot;\u0026gt;\u0026quot; GCA_002443195.1_AflaGuard_genomic.fna  98  GREAT, you just linearized a fasta file. Now let\u0026rsquo;s get some metrics.\nIdentifying patterns in fasta files with awk [back to top]\nAn important pattern to find are those nucleotides that have not been identified yet due to low quality sequencing. We might want to eliminate contigs or scaffolds containing these NNNN patterns since they are not useful for downstream analyses (this varies depending on the researcher\u0026rsquo;s needs). Let\u0026rsquo;s check:\n$ awk '/NNNNN/{ print $0 }' linearized_GCA_002443195.1_AflaGuard_genomic.fna | wc -l  32  So, 32 out of 98 contigs have some sort of NNNNN patterns of at least 5 Ns.\nLet\u0026rsquo;s get the sequence lengths of the current scaffolds\n$ cat linearized_GCA_002443195.1_AflaGuard_genomic.fna | awk 'NR%2==0' | awk '{print length($1)}'   What is happening above is that NR%2==0 is requesting that every even line in the file is printed, then these lines are piped into another awk that gives the length of the sequence.\n We can also redirect the output to a new file.\n  $ cat linearized_GCA_002443195.1_AflaGuard_genomic.fna | awk 'NR%2==0' | awk '{print length($1)}' \u0026gt; read_dist_GCA_002443195.1_AflaGuard_genomic.fna  Now let\u0026rsquo;s check the read distribution file\n$ head -n 5 read_dist_GCA_002443195.1_AflaGuard_genomic.fna  It appears like some scaffolds have 4 million nucleotides\n4471384 4150194 2714413 2659415 2557007   Task 3 [back to top] Linearize the fasta file GCA_000006275.2_JCVI-afl1-v2.0_genomic.fna and count the number of nucleotides on each scaffold.\n $ bash linearize.sh GCA_000006275.2_JCVI-afl1-v2.0_genomic.fna $ cat linearized_GCA_000006275.2_JCVI-afl1-v2.0_genomic.fna | awk 'NR%2==0' | awk '{print length($1)}' \u0026gt; read_dist_GCA_000006275.2_JCVI-afl1-v2.0_genomic.fna  Once you have both files let\u0026rsquo;s get the shortest contig lenghts:\n$ sort -n read_dist_GCA_002443195.1_AflaGuard_genomic.fna | head -n 1 $ sort -n read_dist_GCA_000006275.2_JCVI-afl1-v2.0_genomic.fna | head -n 1   Task 4 [back to top] Obtain the largest contig length on both genomes\n Annotation files and awk [back to top]\nAnnotation files of these genomes contain information about the genes that the nucleotides encode. We will be doing some basic filtering with awk to find genes of interest.\nFirst let\u0026rsquo;s move to the annotations directory\n$ cd ../annotations  We will be working on the annotations of the same two genomes that we used for counting the length of each scaffold.\nImportant information about gff files can be found online here\nWhat is most important about these files is that they usually have 9 columns.\n   Position index Position name Description     1 sequence The name of the sequence where the feature is located.   2 source Keyword identifying the source of the feature, like a program (e.g. Augustus or RepeatMasker) or an organization (like TAIR).   3 feature The feature type name, like \u0026ldquo;gene\u0026rdquo; or \u0026ldquo;exon\u0026rdquo;. In a well structured GFF file, all the children features always follow their parents in a single block (so all exons of a transcript are put after their parent \u0026ldquo;transcript\u0026rdquo; feature line and before any other parent transcript line). In GFF3, all features and their relationships should be compatible with the standards released by the Sequence Ontology Project.   4 start Genomic start of the feature, with a 1-base offset. This is in contrast with other 0-offset half-open sequence formats, like BED files.   5 end Genomic end of the feature, with a 1-base offset. This is the same end coordinate as it is in 0-offset half-open sequence formats, like BED files.[citation needed]   6 score Numeric value that generally indicates the confidence of the source on the annotated feature. A value of \u0026ldquo;.\u0026rdquo; (a dot) is used to define a null value.   7 strand Single character that indicates the Sense (molecular biology) strand of the feature; it can assume the values of \u0026ldquo;+\u0026rdquo; (positive, or 5\u0026rsquo;-\u0026gt;3\u0026rsquo;), \u0026ldquo;-\u0026rdquo;, (negative, or 3\u0026rsquo;-\u0026gt;5\u0026rsquo;), \u0026ldquo;.\u0026rdquo; (undetermined).   8 frame (GTF, GFF2) or phase (GFF3) Frame or phase of CDS features; it can be either one of 0, 1, 2 (for CDS features) or \u0026ldquo;.\u0026rdquo; (for everything else). Frame and Phase are not the same, See following subsection.   9 Attributes All the other information pertaining to this feature. The format, structure and content of this field is the one which varies the most between the three competing file formats    It would be good if we first explore the header:\n$ head -n 5 GCA_000006275.2_JCVI-afl1-v2.0_genomic.gff  The header contains a lot of information about generalities of the annotation and the genome itself. We must skip these first lines. They are usually not tab-delimited.\nThe best way to do it is just by targetting lines of interest, for example I am interested in aflatoxin genes. Therefore I will grep the file for the pattern aflatoxin.\n$ grep -i \u0026quot;aflatoxin\u0026quot; GCA_000006275.2_JCVI-afl1-v2.0_genomic.gff  Since I am interested only on those genes I will redirect the output.\n$ grep -i \u0026quot;aflatoxin\u0026quot; GCA_000006275.2_JCVI-afl1-v2.0_genomic.gff \u0026gt; aflatoxin_genes.gff  Now let\u0026rsquo;s analyze by column. Usually the word aflatoxin should be found in the Attributes column which is column 9. So I can also get those same lines by doing this:\nPrint each line where the 9th field is similar to aflatoxin:\n$ awk -F \u0026quot;\\t\u0026quot; '$9 ~ \u0026quot;aflatoxin\u0026quot;' GCA_000006275.2_JCVI-afl1-v2.0_genomic.gff  Now let\u0026rsquo;s check the difference between grep and awk\n$ grep -i \u0026quot;aflatoxin\u0026quot; GCA_000006275.2_JCVI-afl1-v2.0_genomic.gff | wc -l $ awk -F \u0026quot;\\t\u0026quot; '$9 ~ \u0026quot;aflatoxin\u0026quot;' GCA_000006275.2_JCVI-afl1-v2.0_genomic.gff | wc -l  We must get the same result for both which is 107 entries.\nWe have already redirected the aflatoxin annotations to a separate file. Now let\u0026rsquo;s play with that file.\nWe can get all the positive sense CDS and count them\n$ awk -F \u0026quot;\\t\u0026quot; '$7 == \u0026quot;+\u0026quot;' aflatoxin_genes.gff | wc -l  45   Task 5 [back to top] Count the number of CDS in the aflatoxin annotation file\n Extras with gff files [back to top]\nPrint all sequences annotated in a GFF3 file: This command will work only if we use the original gff file.\n$ cut -s -f 1,9 GCA_000006275.2_JCVI-afl1-v2.0_genomic.gff | grep $'\\t' | cut -f 1 | sort | uniq  Determine all feature types annotated in a GFF3 file.\n$ grep -v '^#' GCA_000006275.2_JCVI-afl1-v2.0_genomic.gff | cut -s -f 3 | sort | uniq  CDS exon gene mobile_genetic_element mRNA region  Here the -v in grep is saying to target the reverse of the search. If you remember whenever you did head in the annotation file there were many comments. It is trying to get rid of those lines first.\nThe output is piped to a cut where the -f is saying to select only the column 3 and the -s asks to avoid printing lines that do not contain the field 3 (empty lines or entries).\nDetermine the number of genes annotated in a GFF3 file.\n$ grep -c $'\\tgene\\t' GCA_000006275.2_JCVI-afl1-v2.0_genomic.gff  13485  "
},
{
	"uri": "https://bioinformatics.netlify.com/morning/basic_unix/",
	"title": "Unix overview",
	"tags": [],
	"description": "",
	"content": " The Cowboy is a command-line interface  Forget about your mouse from now on. In the shell, only your keyboard will take you where you wanna be\u0026hellip;\n This is your shell prompt, and it looks like this whenever it\u0026rsquo;s ready to accept your commands (input):\nyour_username_here $  When you have your prompt, you communicate with the computer by typing a command and hitting enter to run it.\nIn computer words, \u0026lsquo;typing a command\u0026rsquo; is accepting input from keyboard (from your keyboard\u0026hellip; you!). This is called standard input (stdin).\nWhen you run a command, the computer prints the output on the screen. This is called standard output (stdout).\nStandard Input Some commands are stand-alone, e.g. date, ls, and cal, which means that you don\u0026rsquo;t necessarily have to input anything, because they have a default input.\n$ date Wed Mar 7 09:39:26 CST 2018   Try running cal and ls. What\u0026rsquo;s the output?\n The majority of the commands we\u0026rsquo;ll use, e.g. cat and less, require some input. You can simply do this by redirecting stdin. To redirect stdin, you can use \u0026lt;\n$ cat \u0026lt; mgrisea_mat1_aa.txt \u0026gt;lcl|AB080670.2_prot_BAC65087.1_1_[gene=MAT1-1-1]_alpha_box MIASLSPDDIARLIPQETLTSLLRANDEKERLRELPVSPRAVAAASKNKKKVNGFMAFRSYYAGIFQDRPQKERSPFITLLWQKETLKSRWTLMANVFSRIRDFAGTTRGRMAMSGFLRVACPLLGITKPCDYLRRYNWELEFVADASAPYDAAMKYEISQSQIPHIVDEFEVPTTEIELLRACVQGGFPFENSAQLLRDMEDSSVTVMTRTAPIMAPSHASQASHGQHNHHFINTLINDPDAAISALLPQDEDIGSLMVDMNIIHSLETDSSTTSSARNSVSPLEQHLFFHEDVSIDPSTMVSFPGEGHGHPETQYSYPNPTLGLW  or, you can simply omit \u0026lt;\n$ cat mgrisea_mat1_aa.txt \u0026gt;lcl|AB080670.2_prot_BAC65087.1_1_[gene=MAT1-1-1]_alpha_box MIASLSPDDIARLIPQETLTSLLRANDEKERLRELPVSPRAVAAASKNKKKVNGFMAFRSYYAGIFQDRPQKERSPFITLLWQKETLKSRWTLMANVFSRIRDFAGTTRGRMAMSGFLRVACPLLGITKPCDYLRRYNWELEFVDASAPYDAAMKYEISQSQIPHIVDEFEVPTTEIELLRACVQGGFPFENSAQLLRDMEDSSVTVMTRTAPIMAPSHASQASHGQHNHHFINTLINDPDAAISALLPQDEDIGSLMVDMNIIHSLETDSSTTSSARNSVSPLEQHLFFHEDVSIDPSTMVSFPGEGHGHPETQYSYPNPTLGLW  Standard output The output of these commands is printed on the screen (stdout).\nThe stdout on the screen means that:\n1. Output is not being stored anywhere in any form\n2. The command is not altering the original data\nBasic commands  Who are you? whoami prints your username.\n  $ whoaim nathalia   Where am I? pwd stands for print current working directory. It prints your current location, aka path.  $ pwd /home/nathalia   What kind of path is this?\n  Directory listing. ls lists files and directories in your current directory  $ ls   This prints the listing to the screen. If empty, won\u0026rsquo;t print anything.\n ls is a command that has options, which modify the default behavior of a command. In the case of ls, options consist of a dash and one or more characters such as ls -l\n$ ls -l   Did you notice a different in listing display?\n You: Natty, I love options. I wanna see all options for ls! Natty: You can check out the manual page for all the options available!\nFor any command, man opens up the manual page of any command as a kind of pop-up window.\n$ man ls   LS(1) User Commands LS(1) NAME ls - list directory contents SYNOPSIS ls [OPTION]... [FILE]... DESCRIPTION List information about the FILEs (the current directory by default). Sort entries alphabetically if none of -cftuvSUX nor --sort. Mandatory arguments to long options are mandatory for short options too. -a, --all do not ignore entries starting with . -A, --almost-all do not list implied . and .. --author with -l, print the author of each file -b, --escape print octal escapes for nongraphic characters --block-size=SIZE use SIZE-byte blocks. See SIZE format below -B, --ignore-backups do not list implied entries ending with ~ -c with -lt: sort by, and show, ctime (time of last modification of file status information) with -l: show ctime and sort by name otherwise: sort by ctime (...)  Hit q to exit and return to the command-line.\n You: But, Nathy, what\u0026rsquo;s your favorite flag?\nNatty: I am so glad you asked!\n $ ls -lhtr   Test it out. Search the man pages, and figure out what each options does.\n  Creating a directory. mkdir stands for make a directory, and it requires input directory name. It should be a new name, never duplicate names.\nLet\u0026rsquo;s create a directory for our workshop.  $ mkdir workshop_mar17   Hit ls.\n We created the directory, however we are not inside yet.\n Change directory. cd is the command to change directories. This commands requires input directory name that should be immediately where you are (aka, your working directory).  $ cd workshop_mar17   Hit pwd.\n Let\u0026rsquo;s say we wanted to go back to our /home. There are multiple ways to do that:\nOption 1:\n$ cd ~  Option 2:\n$ cd  Option 3:\n$ cd /home/*your_username_here*  With cd we can move across different levels of directory hierarchy if you input a path.\nThe figure below is a representation of a file system. Let\u0026rsquo;s pause for 2 minutes to check this out.\n  File system organization   Your prompt is in /home. Now, try to answer these questions quickly without coding:\n- What\u0026rsquo;s the command to change directory to aa_sequences/?\n- What\u0026rsquo;s the command to change directory to cowboy_scripts/?\n- What\u0026rsquo;s the command to change directory to annotation/?\nNow, your prompt is in /annotation. Try to answer these questions quickly without coding:\n- What do you see inside this directory?\n- What\u0026rsquo;s the command to change directory to workshop_mar17/?\n. (dot) represents the current directory.\n.. (two dots, no spaces) represents the parent directory.\nHit the tab for autocompletion of file names and paths.\nBash keeps history of your commands. Hit the up-arrow key to scroll through.\n Going back to where we were\u0026hellip; Let\u0026rsquo;s go back inside workshop_mar17/.\n$ cd workshop_mar17   Something you\u0026rsquo;ll use a lot is a text editor to create files and scripts. nano is a very basic text editor, and very easy to learn.  Let\u0026rsquo;s create a fasta file named example_sequence.fasta:\nNotice the extension of the file: .fasta. What does that mean to the computer?\n $ nano example_sequence.fasta   GNU nano 2.0.6 File: example_sequence.fasta [ New File ] ^G Get Help ^O WriteOut ^R Read File ^Y Prev Page ^K Cut Text ^C Cur Pos ^X Exit ^J Justify ^W Where Is ^V Next Page ^U UnCut Text ^T To Spell  When you hit enter, the text editor appears on your screen. Notice the file name on the top. And on the bottom of the screen, notice keyboard shortcuts\u0026hellip; remember that your mouse isn\u0026rsquo;t gonna work here.\nLet\u0026rsquo;s create hypothetical nucleotide sequences.\n GNU nano 2.0.6 File: example_sequence.fasta \u0026gt;hypothetical_nucleotide_1 ATCTGATCGATCGATCGATATCTTTTTTAGCTAGG \u0026gt;hypothetical_nucleotide_2 ACTAGCTAGCTATTACGGGGGGCTAGCTAGCTAGCGGGATCGATTTA \u0026gt;hypothetical_nucleotide_3 ATCGATCGATCGAAAAAATCGATTTTCGATCGATCGATCGA [ New File ] ^G Get Help ^O WriteOut ^R Read File ^Y Prev Page ^K Cut Text ^C Cur Pos ^X Exit ^J Justify ^W Where Is ^V Next Page ^U UnCut Text ^T To Spell  I just finish typing the last nucleotide sequence, and\u0026hellip; I don\u0026rsquo;t really like these headers anymore. Let\u0026rsquo;s change them.\nUse your arrow-keys to move up to rename headers.\n GNU nano 2.0.6 File: example_sequence.fasta \u0026gt;nucleotide_sequence_1 ATCTGATCGATCGATCGATATCTTTTTTAGCTAGG \u0026gt;nucleotide_sequence_2 ACTAGCTAGCTATTACGGGGGGCTAGCTAGCTAGCGGGATCGATTTA \u0026gt;nucleotide_sequence_3 ATCGATCGATCGAAAAAATCGATTTTCGATCGATCGATCGA [ New File ] ^G Get Help ^O WriteOut ^R Read File ^Y Prev Page ^K Cut Text ^C Cur Pos ^X Exit ^J Justify ^W Where Is ^V Next Page ^U UnCut Text ^T To Spell  Great! Looks much better.\nTo exit nano and save the file, hit crtl+X. Notice that a new message appears on the bottom of the screen:\n Save modified buffer (ANSWERING \u0026quot;No\u0026quot; WILL DESTROY CHANGES) ? Y Yes N No ^C Cancel  Because we just created this file (made changes to it), nano is asking if we want to save what we just typed. If all looks good, hit Y.\nAnother new message appears:\n File Name to Write: example_sequence.fasta ^G Get Help ^T To Files M-M Mac Format M-P Prepend ^C Cancel M-D DOS Format M-A Append M-B Backup File  nano wants to make sure you want to save what you typed as the file name you provided. If all looks good, hit enter and you are back in the command-line.\nLet\u0026rsquo;s create a new directory:\n$ mkdir testings   To create a copy of the fasta file, use cp, which stands for copy.  If you want to create a duplicate of the file in the same directory you must provide a new name for the duplicate:\n$ cp example_sequence.fasta nucleotide_sequences.fasta  If you want to creat a copy of the file in testings/ you must provide the path to the directory (don\u0026rsquo;t provide a new name):\n$ cp example_sequence.fasta testings/ $ ls testings/ example_sequence.fasta  In our current directory, you should have:\n$ ls example_sequence.fasta nucleotide_sequences.fasta testings/   The command to rename a file and to move a file around is the same. mv stands for move, but you also use it to rename files.  To rename a file:\n$ mv example_sequence.fasta original_nucleotide_sequences.fasta $ ls nucleotide_sequences.fasta original_nucleotide_sequences.fasta testings/  Create a new directory named original:\n$ mkdir original  To move original_nucleotide_sequences.fasta into original/:\n$ mv original_nucleotide_sequences.fasta original/  To move a file:\n$ mv file_name_A directory_name_B/\nTo rename a file:\n$ mv file_name_A file_name_B\n  To delete a file, use rm that stands for remove.  A word of caution here: when you remove a file from the command-line, the file is removed forever and there is no way to recover it.\nWith rm THERE IS NO GOING BACK!\n $ rm nucleotide_sequences.fasta  $ ls original/ testings/   To delete a directory, use rm -r.  THERE IS NO GOING BACK!\n $ rm -r testings/ $ ls original/  If a directory is empty, you can use rmdir. If a directory isn\u0026rsquo;t empty, use rm -r.\nYup\u0026hellip; it\u0026rsquo;s gone!\nHow\u0026rsquo;s that for your first exposure to Cowboy? Any questions? "
},
{
	"uri": "https://bioinformatics.netlify.com/afternoon/my_first_script/",
	"title": "My first bash script",
	"tags": [],
	"description": "",
	"content": " Contents  Introduction My First script Tips for nano Task 6 Using the TORQUE scheduler to submit jobs in Cowboy HPC  Intro [back to top]\nThe native language of Linux for its terminal is bash and we can write scripts and create a small program that does all the above for us with single line in bash. First, we need to create a file with nano which is a text editor that is also installed in Linux by default. There are other text editors like vim. Using nano we can create a .txt like so:\nMy First script [back to top]\nFirst let\u0026rsquo;s move to our afternoon folder and create a folder called scripts and cd to scripts\n$ cd /scratch/asecas86/afternoon $ mkdir scripts $ cd scripts  Then let\u0026rsquo;s type the following: You already learned how to use nano. Let\u0026rsquo;s practice.\n$ nano myfirstscript.txt  [asecas86@n252 scripts]$ nano myfirstscript.txt GNU nano 2.0.9 File: myfirstscript.txt Modified Andres Espindola [ New File ] ^G Get Help ^O WriteOut ^R Read File ^Y Prev Page ^K Cut Text ^C Cur Pos ^X Exit ^J Justify ^W Where Is ^V Next Page ^U UnCut Text ^T To Spell  Hit Ctrl+X then hit Y\nTips nano [back to top]\n Your mouse will NOT work at all in the terminal, so please do not try to click in different parts of the nano editor to edit the document.     Use your keyboard arrows to move around the document instead.    Now that you remembered how to use nano. We can create your first script.\nFirst let\u0026rsquo;s remove that file that you recently created.\n$ rm myfirstscript.txt  Any script in Linux should start with shebang:\u0026ldquo;#!\u0026rdquo;. Start another nano document:\n$ nano myfirstscript.sh  Type the following in the editor:\n#!/bin/bash # declare STRING variable STRING=\u0026quot;Pistol Pete\u0026quot; #print variable on a screen echo $STRING  Everything of what you are writing in your first bash script has been already covered during the morning session. Save the file and now we need to make it executable.\n$ chmod +x myfirstscript.sh  Now you can execute your first script\n$ ./myfirstscript.sh  Do you want to try something more difficult: YASSSS\nBuilding a script that contains arguments [back to top]\nMany scripts are created to facilitate the user typing the same code over and over again. Most of the scripts have inputs and outputs. In our previous script we did not have any of those.\nThe easiest way to create a bash script with input output feature is by adding argument options to the script.\nFor example, one of the scripts that we previously used to linearize fasta contained one argument.\n$ bash linearize.sh genome.fasta  The genome.fasta was the argument at that moment.\nLet\u0026rsquo;s modify the previous script in order to take arguments.\n$ nano myfirstscript.sh   GNU nano 2.0.9 File: myfirstscript.sh Modified #!/bin/bash # declare STRING variable STRING=$1 #print variable on a screen echo $STRING Save modified buffer (ANSWERING \u0026quot;No\u0026quot; WILL DESTROY CHANGES) ? Y Yes N No ^C Cancel  Hit Y to save and then let\u0026rsquo;s run the program with arguments\n TASK 6 [back to top] Create a Script that takes your first name and your last name as arguments and print them in the reverse order.\n Ideally, you can use all the information given in this small workshop to use different manipulation techniques and put them in a script that you can run on an everyday basis.\nUsing the TORQUE scheduler to submit jobs in cowboy HPC [back to top]\nAlthough we have been using the login nodes throughout this workshop. It is very very important to understand that computing intensive jobs must be submitted through the HPC scheduler. Now I will teach you how to do it.\nAll this information and guidelines are found at the HPC online tutorial. However, this is a very brief explanation how to use and submit a very basic job.\n First, to submit your job you need to have a submission script which contains all the arguments for submission. Let\u0026rsquo;s create a basic one:  nano my_first_pbs_script.pbs  Then we want to type the following inside that script. (Please copy and paste this part inside your nano prompt)\n#!/bin/bash #PBS -q express # specify the queue batch, express or bigmem #PBS -l nodes=1:ppn=1 # request 1 processor on 1 node #PBS -l walltime=10:00 # choose a walltime slightly longer than your job will take #PBS -j oe cd $PBS_O_WORKDIR module load python/3.5.0 myfirstscript.sh  Once you have finished modifying you save it and submit the job as follows:\nqsub my_first_pbs_script.pbs  You can check your position in que queue by typing\nqstat -n | grep \u0026quot;yourusername\u0026quot;  Your STDOUT output will be written into a file that is created by the TORQUE scheduler.\nAnd that\u0026rsquo;s all FOLKS.\n"
},
{
	"uri": "https://bioinformatics.netlify.com/morning/unix_essentials/",
	"title": "Unix essentials",
	"tags": [],
	"description": "",
	"content": " Let\u0026rsquo;s jump right into it!\nFirst of all, get your things organized!\n$ mkdir workshop_mar17 $ cd workshop_mar17 $ mkdir morning_session $ cd morning_session  I believe you have worked with (or heard of) a fasta file. Fasta files might have .fasta or .fa extensions. These are basically text files that contain nucleotide or protein sequences. A fasta file can contain gene sequences, or even an entire genome.\nLet\u0026rsquo;s download an Aspergillus genome that is available on the web. This is the website to the genome:\nhttp://www.aspergillusgenome.org/download/sequence/A_nidulans_FGSC_A4/current/A_nidulans_FGSC_A4_current_chromosomes.fasta.gz  We can download this file directly to Cowboy using curl -O:\n$ curl -O http://www.aspergillusgenome.org/download/sequence/A_nidulans_FGSC_A4/current/A_nidulans_FGSC_A4_current_chromosomes.fasta.gz % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 9155k 100 9155k 0 0 5685k 0 0:00:01 0:00:01 --:--:-- 5682k  The file we download has .gz extension, which means this is a size-compressed file. To uncompress it, use gunzip:\n$ gunzip A_nidulans_FGSC_A4_current_chromosomes.fasta.gz  IMPORTANT: never work with original files. Always make sure to save an original copy that you\u0026rsquo;ll never modify.\n$ mkdir originals $ cp A_nidulans_FGSC_A4_current_chromosomes.fasta originals/   What are the components of a fasta file?\n When you download or receive a file from a collaborator, you must firstly investigate the file using less, head, and tail.\n less  $ less A_nidulans_FGSC_A4_current_chromosomes.fasta  Hit Q to exit and return to the command-line.\n head prints the first lines of a file. By default, it prints the first 10 lines.  $ head A_nidulans_FGSC_A4_current_chromosomes.fasta \u0026gt;ChrIII_A_nidulans_FGSC_A4 (3470897 nucleotides) CAACCTTGTTGTACTGAAATGGCTACCTCTGCCCCCCAGACCCTGATTTGCCGCTGCTCA ACTGACCTTACAAGCCCCCTGAGCCCCCCCAGCCTGACACCAACCATCATCAATGCAAAG TCAAAGAGGAGATACTACCACAATCAGCAATGGGAGCAGGAGTGTGTGCTGCAGGCCAGC CTGATAACAGCTCTGCCTCAGTACCCTGCTCCCTTGGACAGCATGGATGAGCTTGTGATC GCAAAGCCCGCAGCAGACACCAACAACTCCCACAACAACAACAACAACTCCCACAACAAC AACAATAACAACAACAACACCAACACCAACAGCAACAACAGCCAGGACGCGGACAGCAAC GCGGACAGCGACCACAACAGCAACAGTGACCAGAATCAGCAGAAGCCTATTATTGAGACT ACTGATGATCACAGTGTAGATGACCAGCACATCGACACCGTCAGTGACAGCGATGAACCC AGCTCCCCAATCATGGGCATTGGCCTCCGCCCCATCAGCAAGCCTGTGTCTGTTGTTGTC  You can add an count option such as head -20 A_nidulans_FGSC_A4_current_chromosomes.fasta, and now head prints the first 20 lines of the file.\n tail prints the last lines of a file, and it works just like head.  $ tail A_nidulans_FGSC_A4_current_chromosomes.fasta AGAAATTTTGTAGCTAAAAAATCACCAATAGCTCATAAATATATGAATCACGGTACATTA ATAGAGTTAATTTGAACAATAACACCAGCATTTATTTTAATACTAATAGCATTCCCTTCT TTCAAATTATTATATTTAATGGATGAAGTAATGGATCCTTCTTTAGTTGTTTATGCAGAA GGTCACCAATGATATTGAAGTTACCAATATCCTGATTTTACAAATGAAGATAATGAGTTT ATAGAATTTGATTCATATATAGTACCAGAAAGTGATTTAGAAGAAGGTCAATTTAGAATG TTAGAGGTTGATAATAGAGTAATTATTCCAGAATTAACTCACACAAGATTTGTAATTTCT GCAGCAGATGTTATACATTCATATGCTTGTCCATCTTTAGGTATAAAAGCGGATGCATAC CCTGGTAGATTAAATCAAGCATCAGTTTATATAAATCGTCCTGGAACTTTCTTCGGACAA TGTTCTGAAATATGTGGTATATTACATAGCTCAATGCCTATAGCTATACAATCAGTATCA ATAAAAGATTTCTTATTATGATTAAGAGAACAAATGGAAGGATAAGT  Did you notice the Chr in the fasta header? A. nidulans has a complete genome, and these sequences are to the chromosome level.\nKnowing that, how many chromosomes does this assembly has? Use grep to search for pattern in a file.\n$ grep 'Chr' A_nidulans_FGSC_A4_current_chromosomes.fasta \u0026gt;ChrIII_A_nidulans_FGSC_A4 (3470897 nucleotides) \u0026gt;ChrII_A_nidulans_FGSC_A4 (4070060 nucleotides) \u0026gt;ChrIV_A_nidulans_FGSC_A4 (2887738 nucleotides) \u0026gt;ChrI_A_nidulans_FGSC_A4 (3759208 nucleotides) \u0026gt;ChrVIII_A_nidulans_FGSC_A4 (4934093 nucleotides) \u0026gt;ChrVII_A_nidulans_FGSC_A4 (4550218 nucleotides) \u0026gt;ChrVI_A_nidulans_FGSC_A4 (3407944 nucleotides) \u0026gt;ChrV_A_nidulans_FGSC_A4 (3403833 nucleotides)  But, is that all the sequences in this file? We can answer this question by searching for a mandatory component of a fasta file, the \u0026gt;.\n$ grep '\u0026gt;' A_nidulans_FGSC_A4_current_chromosomes.fasta \u0026gt;ChrIII_A_nidulans_FGSC_A4 (3470897 nucleotides) \u0026gt;ChrII_A_nidulans_FGSC_A4 (4070060 nucleotides) \u0026gt;ChrIV_A_nidulans_FGSC_A4 (2887738 nucleotides) \u0026gt;ChrI_A_nidulans_FGSC_A4 (3759208 nucleotides) \u0026gt;ChrVIII_A_nidulans_FGSC_A4 (4934093 nucleotides) \u0026gt;ChrVII_A_nidulans_FGSC_A4 (4550218 nucleotides) \u0026gt;ChrVI_A_nidulans_FGSC_A4 (3407944 nucleotides) \u0026gt;ChrV_A_nidulans_FGSC_A4 (3403833 nucleotides) \u0026gt;mito_A_nidulans_FGSC_A4 (33227 nucleotides)  grep prints the lines in which the pattern is found. Use grep -c to count pattern matches.\n$ grep -c 'Chr' A_nidulans_FGSC_A4_current_chromosomes.fasta 8 $ grep -c '\u0026gt;' A_nidulans_FGSC_A4_current_chromosomes.fasta 9  Remember that the output of these programs get printed on the screen, aka stdout.\nThe stdout on the screen means that:\n+It is not being stored anywhere in any form\n+It is not altering the original data\nBut, if we are interested in keeping this information, we can REDIRECT stdout to a text file to store information.\nTo redirect stdout we use \u0026gt;.\n$ grep 'Chr' A_nidulans_FGSC_A4_current_chromosomes.fasta \u0026gt; output_A_nidulans_fasta_headers.txt  $ cat output_A_nidulans_fasta_headers.txt \u0026gt;ChrIII_A_nidulans_FGSC_A4 (3470897 nucleotides) \u0026gt;ChrII_A_nidulans_FGSC_A4 (4070060 nucleotides) \u0026gt;ChrIV_A_nidulans_FGSC_A4 (2887738 nucleotides) \u0026gt;ChrI_A_nidulans_FGSC_A4 (3759208 nucleotides) \u0026gt;ChrVIII_A_nidulans_FGSC_A4 (4934093 nucleotides) \u0026gt;ChrVII_A_nidulans_FGSC_A4 (4550218 nucleotides) \u0026gt;ChrVI_A_nidulans_FGSC_A4 (3407944 nucleotides) \u0026gt;ChrV_A_nidulans_FGSC_A4 (3403833 nucleotides)  Let\u0026rsquo;s download a different file from A. nidulans:\nhttp://www.aspergillusgenome.org/download/chromosomal_feature_files/A_nidulans_FGSC_A4/A_nidulans_FGSC_A4_current_chromosomal_feature.tab  $ curl -O http://www.aspergillusgenome.org/download/chromosomal_feature_files/A_nidulans_FGSC_A4/A_nidulans_FGSC_A4_current_chromosomal_feature.tab % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 2724k 100 2724k 0 0 2568k 0 0:00:01 0:00:01 --:--:-- 2570k  This file isn\u0026rsquo;t compressed.\nWhat kind of file is this?! This is a chromosomal feature file. You can find the explanation to the components of this file in this link:\nhttp://www.aspergillusgenome.org/download/chromosomal_feature_files/A_nidulans_FGSC_A4/  What do you do when you first download/receive a file?\n$ cp A_nidulans_FGSC_A4_current_chromosomal_feature.tab originals/  Now, what do you do? Investigate with less, of course.\n$ less A_nidulans_FGSC_A4_current_chromosomal_feature.tab  While in the less window, hit -S to wrap lines.\nThere is a lot of information in this file! It is difficult to inspect the contents.\nSomething very common is to build up commands to filter data using pipes.\nPipes are built with | in between commands.\nLet\u0026rsquo;s focus on columns 1, 4 and 5.\n column 1 is gene identifier column 4 is gene feature column 5 is chromosome  Let\u0026rsquo;s build a pipe to filter out these columns.\nWe can start a pipe with cat, then use cut to slice the columns we want, and finish with head -20:\n$ cat A_nidulans_FGSC_A4_current_chromosomal_feature.tab | cut -f 1,4,5 | head -20 ! File name: A_nidulans_FGSC_A4_version_s10-m04-r06_chromosomal_feature.tab ! Organism: Aspergillus nidulans FGSC A4 ! Genome version: s10-m04-r06 ! Date created: Thu Nov 30 13:46:18 2017 ! Created by: The Aspergillus Genome Database (http://www.aspergillusgenome.org/) ! Contact Email: aspergillus-curator AT lists DOT stanford DOT edu ! Funding: NIAID at US NIH, grant number R01-AI077599-01 ! AN0004\tpseudogene\tChrVIII_A_nidulans_FGSC_A4 AN0005\tORF|Uncharacterized\tChrVIII_A_nidulans_FGSC_A4 AN0006\tORF|Uncharacterized\tChrVIII_A_nidulans_FGSC_A4 AN0007\tORF|Uncharacterized\tChrVIII_A_nidulans_FGSC_A4 AN0008\tpseudogene\tChrVIII_A_nidulans_FGSC_A4 AN0009\tORF|Uncharacterized\tChrVIII_A_nidulans_FGSC_A4 AN0010\tpseudogene\tChrVIII_A_nidulans_FGSC_A4 AN0011\tpseudogene\tChrVIII_A_nidulans_FGSC_A4 AN0012\tORF|Verified\tChrVIII_A_nidulans_FGSC_A4 AN0013\tpseudogene\tChrVIII_A_nidulans_FGSC_A4 AN0014\tORF|Uncharacterized\tChrVIII_A_nidulans_FGSC_A4 AN0015\tORF|Uncharacterized\tChrVIII_A_nidulans_FGSC_A4  There is more to inspect about this file. Redirect output and work with a less cluttered file.\n$ cat A_nidulans_FGSC_A4_current_chromosomal_feature.tab | cut -f 1,4,5 \u0026gt; output_A_nidulans_filtered_features.txt  What do you see in the second column (gene features) of this output file?\n pseudogene, ORF|Uncharacterized, ORF|Verified, etc.\n Let\u0026rsquo;s find all unique features. Let\u0026rsquo;s also delete the first eight lines, which are comments and information about the group that produced this genome.\n$ cat output_A_nidulans_filtered_features.txt | sed '1,8d' | cut -f 2 | sort | uniq ORF|Merged/Split|Uncharacterized ORF|Merged/Split|Verified ORF|Uncharacterized ORF|Uncharacterized|Merged/Split ORF|Uncharacterized|transposable element gene ORF|Verified multigene locus ncRNA|Uncharacterized ncRNA|Verified pseudogene pseudogene|Verified pseudogene|transposable element gene rRNA|Uncharacterized tRNA|Uncharacterized tRNA|Verified uORF|Uncharacterized uORF|Verified  sed 1,8d deletes the first eight lines.\nsort and uniq must be used together and in this order to get unique features.\nRepeat the pipe and redirect output.\n$ cat output_A_nidulans_filtered_features.txt | sed '1,8d' output_A_nidulans_filtered_features.txt | cut -f 2 | sort | uniq \u0026gt; output_A_nidulans_filtered_annotations.txt  Challenge!!  How many times ORF|Uncharacterized appears on the 2nd column? How many times pseudogene appears on the 2nd column? Does the 1st column list each gene name (those named \u0026lsquo;AN###\u0026rsquo;) only once? Which word appears 199 times on the 2nd column?  Dip your toes into some advanced stuff\u0026hellip;  Wildcard\n  The wildcard * is going to match that a pattern before running a command.\n$ ls *.txt output_A_nidulans_fasta_headers.txt output_A_nidulans_filtered_features.txt $ ls A_nidulans* A_nidulans_FGSC_A4_current_chromosomal_feature.tab A_nidulans_FGSC_A4_current_chromosomes.fasta A_nidulans_FGSC_A4_current_chromosomes.fasta.gz $ ls *FGSC_A4* A_nidulans_FGSC_A4_current_chromosomal_feature.tab A_nidulans_FGSC_A4_current_chromosomes.fasta A_nidulans_FGSC_A4_current_chromosomes.fasta.gz   For loop\n  A loop is an iteration statement that will be repeatedly executed.\nThis is a basic for loop syntax:\n$ for VARIABLE in SOMEWHERE; \u0026gt; do command1; \u0026gt; command2; \u0026gt; commandN; \u0026gt; done  or,\n$ for VARIABLE in SOMEWHERE; do command1; command2; commandN; done  VARIABLE is an arbitrary name that you choose.\nSOMEWHERE can be a file or a directory.\nIMPORTANT: What is a \u0026lsquo;VARIABLE\u0026rsquo;?\nA variable is simply a box, which you create, to place values into it. A more technical definition is: a character string that you assign a value. The value could be text, number, filename, path, etc. You can assing more than one type of value to a variable.\nDon\u0026rsquo;t use !, * or - in variable names because these characters have special meaning for unix\u0026hellip;\nYou call a variable you defined by using $ in front of the variable name.\nThis is how you define a variable:\n$ variable_name=variable_value  $ words=\u0026quot;one two three\u0026quot; $ echo $words one two three $ words=\u0026quot;flower sun moon and me\u0026quot; $ echo $words flower sun moon and me  The syntax of a for loop in plain English:\n$ for variable in collection; do things with variable; done  What does a for loop do?\n$ for character in $words; do echo $character; done flower sun moon and me $ for char in $words; do echo $char; done flower sun moon and me $ for bananas in $words; do echo $bananas; done flower sun moon and me  Now, the English translation:\n$ for i in {1..5}; do echo \u0026quot;Hello $i times\u0026quot;; done Hello 1 times Hello 2 times Hello 3 times Hello 4 times Hello 5 times $ for i in {1..5}; do echo \u0026quot;It's gonna print i $i times\u0026quot;; done It's gonna print i 1 times It's gonna print i 2 times It's gonna print i 3 times It's gonna print i 4 times It's gonna print i 5 times  Let\u0026rsquo;s execute commands in files that begin with A_nidulans*.\n$ for file in A_nidulans*; do echo $file; done A_nidulans_FGSC_A4_current_chromosomal_feature.tab A_nidulans_FGSC_A4_current_chromosomes.fasta A_nidulans_FGSC_A4_current_chromosomes.fasta.gz  Remember that $ reflect to the given variable. If you omit $:\n$ for file in A_nidulans*; do echo file; done file file file  $ for file in output_*; do echo $file; echo ; head -10 $file; echo; done output_A_nidulans_fasta_headers.txt \u0026gt;ChrIII_A_nidulans_FGSC_A4 (3470897 nucleotides) \u0026gt;ChrII_A_nidulans_FGSC_A4 (4070060 nucleotides) \u0026gt;ChrIV_A_nidulans_FGSC_A4 (2887738 nucleotides) \u0026gt;ChrI_A_nidulans_FGSC_A4 (3759208 nucleotides) \u0026gt;ChrVIII_A_nidulans_FGSC_A4 (4934093 nucleotides) \u0026gt;ChrVII_A_nidulans_FGSC_A4 (4550218 nucleotides) \u0026gt;ChrVI_A_nidulans_FGSC_A4 (3407944 nucleotides) \u0026gt;ChrV_A_nidulans_FGSC_A4 (3403833 nucleotides) output_A_nidulans_filtered_features.txt ! File name: A_nidulans_FGSC_A4_version_s10-m04-r06_chromosomal_feature.tab ! Organism: Aspergillus nidulans FGSC A4 ! Genome version: s10-m04-r06 ! Date created: Thu Nov 30 13:46:18 2017 ! Created by: The Aspergillus Genome Database (http://www.aspergillusgenome.org/) ! Contact Email: aspergillus-curator AT lists DOT stanford DOT edu ! Funding: NIAID at US NIH, grant number R01-AI077599-01 ! AN0004\tpseudogene\tChrVIII_A_nidulans_FGSC_A4 AN0005\tORF|Uncharacterized\tChrVIII_A_nidulans_FGSC_A4  The more you practice on your own, and the more you struggle, the more you\u0026rsquo;ll learn. So let\u0026rsquo;s practice struggling!\nChallenge!! Now, you are on your own. Talk to your neighbor and ask your best friend Google whenever you have a burning question.\nDownload A. flavus genome:\nhttp://www.aspergillusgenome.org/download/sequence/A_flavus_NRRL_3357/current/A_flavus_NRRL_3357_chromosomes.fasta.gz  Then, ultimately I want you to create a for loop that will execute the following on both Asperillus genomes:\n1. Print the file name.\n2. Print the number of fasta sequences followed by the word \u0026lsquo;sequences\u0026rsquo;.\n3. Print all the fasta headers.\nMy heart is soft\u0026hellip; soft like a fungal mycelia, or room-temperature butter\u0026hellip; Here goes the answer:\nA_flavus_NRRL_3357_chromosomes.fasta 126 sequences \u0026gt;1041045516887_A_flavus_NRRL_3357 (3491 nucleotides) \u0026gt;1041045516889_A_flavus_NRRL_3357 (4170 nucleotides) \u0026gt;1041045516890_A_flavus_NRRL_3357 (20049 nucleotides) \u0026gt;1041045516891_A_flavus_NRRL_3357 (2076547 nucleotides) (...) A_nidulans_FGSC_A4_current_chromosomes.fasta 9 sequences \u0026gt;ChrIII_A_nidulans_FGSC_A4 (3470897 nucleotides) \u0026gt;ChrII_A_nidulans_FGSC_A4 (4070060 nucleotides) \u0026gt;ChrIV_A_nidulans_FGSC_A4 (2887738 nucleotides) \u0026gt;ChrI_A_nidulans_FGSC_A4 (3759208 nucleotides) \u0026gt;ChrVIII_A_nidulans_FGSC_A4 (4934093 nucleotides) \u0026gt;ChrVII_A_nidulans_FGSC_A4 (4550218 nucleotides) \u0026gt;ChrVI_A_nidulans_FGSC_A4 (3407944 nucleotides) \u0026gt;ChrV_A_nidulans_FGSC_A4 (3403833 nucleotides) \u0026gt;mito_A_nidulans_FGSC_A4 (33227 nucleotides)  This is how the answer looks like. Now, this is a piece of cake! I made it super easy for you!\n"
},
{
	"uri": "https://bioinformatics.netlify.com/",
	"title": "Introduction to Programming for beginners",
	"tags": [],
	"description": "",
	"content": " Introduction to Programming for beginners Entomology and Plant Pathology Organized by EPPGSA\nLectures by Andres Espindola \u0026amp; Nathalia Grachet\nSaturday, March 17th in 130K HBRC\nSoftware set-up: day \u0026amp; time TBD\nSchedule:    Hours Activity     8:30AM-9AM BREAKFAST   9AM-12PM Morning section - Introduction to Cowboy and basic unix with hands-on examples (Nathalia)   12PM-1PM LUNCH   1PM-4PM Afternoon section - Basic scripting and more hands-on examples (Andres)    You\u0026rsquo;ll learn how to:\nLook up resources to troubleshoot/improve your programming skills\nUse command-line to organize, modify, analyze data\nWrite basic scripts to develop tasks in the Cowboy (OSU High Performance Computer)\n"
},
{
	"uri": "https://bioinformatics.netlify.com/morning/answers/",
	"title": "Answers!",
	"tags": [],
	"description": "",
	"content": " The answers Here you\u0026rsquo;ll find the answers to the challenges in 2.4 Unix essentials\n Pipes:  How many times ORF|Uncharacterized appears on the 2nd column?\n$ cat output_A_nidulans_filtered_features.txt | sed '1,8d' | cut -f 2 | grep -c 'ORF|Uncharacterized' 9312  How many times pseudogene appears on the 2nd column?\n$ cat output_A_nidulans_filtered_features.txt | sed '1,8d' | cut -f 2 | grep -c 'pseudogene' 58  Does the 1st column list each gene name (those named \u0026lsquo;AN###\u0026rsquo;) only once?\n$ cat A_nidulans_FGSC_A4_current_chromosomal_feature.tab | sed '1,8d' | cut -f 1 | grep 'AN' -c 10779 $ cat A_nidulans_FGSC_A4_current_chromosomal_feature.tab | sed '1,8d' | cut -f -1 | sort | uniq | grep 'AN' -c 10779   Why a single and straight \u0026lsquo;wc -l \u0026rsquo; won\u0026rsquo;t work?\nDid you tail? There are genes that do not start with \u0026lsquo;AN\u0026rsquo;.\n Which word appears 199 times on the 2nd column?\n$ cat output_A_nidulans_filtered_features.txt | sed '1,8d' | cut -f 2 | sort | uniq -c 189 ORF|Merged/Split|Uncharacterized 4 ORF|Merged/Split|Verified 9235 ORF|Uncharacterized 1 ORF|Uncharacterized|Merged/Split 49 ORF|Uncharacterized|transposable element gene 1209 ORF|Verified 1 multigene locus 1 ncRNA|Uncharacterized 1 ncRNA|Verified 55 pseudogene 2 pseudogene|Verified 1 pseudogene|transposable element gene 2 rRNA|Uncharacterized 199 tRNA|Uncharacterized 9 tRNA|Verified 27 uORF|Uncharacterized 4 uORF|Verified  It\u0026rsquo;s tRNA|Uncharacterized.\n For loop:  Download A. flavus genome, and unzip it.\n$ curl -O http://www.aspergillusgenome.org/download/sequence/A_flavus_NRRL_3357/current/A_flavus_NRRL_3357_chromosomes.fasta.gz A_flavus_NRRL_3357_chromosomes.fasta.gz % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 10.9M 100 10.9M 0 0 6618k 0 0:00:01 0:00:01 --:--:-- 6616k  $ gunzip A_flavus_NRRL_3357_chromosomes.fasta.gz $ ls *flavus* A_flavus_NRRL_3357_chromosomes.fasta  Then, ultimately I want you to create a for loop that will execute the following on both Asperillus genomes:\n Print the file name.\n Print the number of fasta sequences followed by the word \u0026lsquo;sequences\u0026rsquo;.\n Print all the fasta headers.\n  $ for file in A_*.fasta; do echo $file; a=`grep -c '\u0026gt;' $file`; echo $a sequences; echo ; grep '\u0026gt;' $file; echo; done A_flavus_NRRL_3357_chromosomes.fasta 126 sequences \u0026gt;1041045516887_A_flavus_NRRL_3357 (3491 nucleotides) \u0026gt;1041045516889_A_flavus_NRRL_3357 (4170 nucleotides) \u0026gt;1041045516890_A_flavus_NRRL_3357 (20049 nucleotides) \u0026gt;1041045516891_A_flavus_NRRL_3357 (2076547 nucleotides) \u0026gt;1041045516892_A_flavus_NRRL_3357 (3256 nucleotides) \u0026gt;1041045516893_A_flavus_NRRL_3357 (2183 nucleotides) \u0026gt;1041045516894_A_flavus_NRRL_3357 (2614 nucleotides) \u0026gt;1041045516895_A_flavus_NRRL_3357 (2135 nucleotides) \u0026gt;1041045516896_A_flavus_NRRL_3357 (2529 nucleotides) \u0026gt;1041045516897_A_flavus_NRRL_3357 (2052 nucleotides) \u0026gt;1041045516898_A_flavus_NRRL_3357 (2187 nucleotides) \u0026gt;1041045516899_A_flavus_NRRL_3357 (2177 nucleotides) \u0026gt;1041045516900_A_flavus_NRRL_3357 (2275 nucleotides) \u0026gt;1041045516901_A_flavus_NRRL_3357 (2401 nucleotides) \u0026gt;1041045516902_A_flavus_NRRL_3357 (2719 nucleotides) (...) A_nidulans_FGSC_A4_current_chromosomes.fasta 9 sequences \u0026gt;ChrIII_A_nidulans_FGSC_A4 (3470897 nucleotides) \u0026gt;ChrII_A_nidulans_FGSC_A4 (4070060 nucleotides) \u0026gt;ChrIV_A_nidulans_FGSC_A4 (2887738 nucleotides) \u0026gt;ChrI_A_nidulans_FGSC_A4 (3759208 nucleotides) \u0026gt;ChrVIII_A_nidulans_FGSC_A4 (4934093 nucleotides) \u0026gt;ChrVII_A_nidulans_FGSC_A4 (4550218 nucleotides) \u0026gt;ChrVI_A_nidulans_FGSC_A4 (3407944 nucleotides) \u0026gt;ChrV_A_nidulans_FGSC_A4 (3403833 nucleotides) \u0026gt;mito_A_nidulans_FGSC_A4 (33227 nucleotides)  BONUS\nRedirect output of a for loop:\n$ for file in A_*.fasta; do echo $file ; a=`grep -c '\u0026gt;' $file`; echo $a sequences; echo ; grep '\u0026gt;' $file; echo ; done \u0026gt; output_genomes_fasta_headers.txt $ ls output*.txt output_A_nidulans_fasta_headers.txt output_A_nidulans_filtered_features.txt output_genomes_fasta_headers.txt $ cat output_genomes_fasta_headers.txt (...)  "
},
{
	"uri": "https://bioinformatics.netlify.com/afternoon/versions_git/",
	"title": "Version with with git",
	"tags": [],
	"description": "",
	"content": "Probably you have heard about Github and how bioinformaticians are using it too keep their developments up to date. It is an extraordinary tool for keep track of all your script changes and versions. It just requires a little bit of training to SUCCEED.\n  First let\u0026rsquo;s create a folder inside scripts:\nmkdir my_git_script cd my_git_script mv ../myfirstscript.sh .  Create a new repository\ngit init  First you have to configure your global git parameters\ngit config --global user.name \u0026quot;username\u0026quot;  You have initiated a new repository\na hidden folder called .git has been created\nls -ltha  total 256K drwxr-xr-x 7 asecas86 clusterusers 4.0K Mar 16 01:11 .git drwxr-xr-x 3 asecas86 clusterusers 4.0K Mar 16 01:11 . drwxr-xr-x 3 asecas86 clusterusers 4.0K Mar 16 01:11 .. -rwxr-xr-x 1 asecas86 clusterusers 101 Mar 16 01:10 myfirstscript.sh  git add *  Adds all the changes in your directory to the local git cache\ngit status  Shows all the changes you have done in your directory\n[asecas86@n252 my_git_script]$ git status # On branch master # # Initial commit # # Changes to be committed: # (use \u0026quot;git rm --cached \u0026lt;file\u0026gt;...\u0026quot; to unstage) # # new file: myfirstscript.sh  git commit -m \u0026quot;My first commit\u0026quot;  "
},
{
	"uri": "https://bioinformatics.netlify.com/afternoon/sources/",
	"title": "Sources afternoon",
	"tags": [],
	"description": "",
	"content": "Most of the code that was presented to you during the afternoon session was developed or adapted by Andres. However, some commands (no modification) were obtained from the following sources:\n https://raw.githubusercontent.com/stephenturner/oneliners/master/README.md http://gettinggeneticsdone.blogspot.com/2013/10/useful-linux-oneliners-for-bioinformatics.html#comments http://sed.sourceforge.net/sed1line.txt https://github.com/lh3/seqtk http://lh3lh3.users.sourceforge.net/biounix.shtml http://genomespot.blogspot.com/2013/08/a-selection-of-useful-bash-one-liners.html http://biowize.wordpress.com/2012/06/15/command-line-magic-for-your-gene-annotations/ http://genomics-array.blogspot.com/2010/11/some-unixperl-oneliners-for.html http://bioexpressblog.wordpress.com/2013/04/05/split-multi-fasta-sequence-file/ http://www.commandlinefu.com/  "
},
{
	"uri": "https://bioinformatics.netlify.com/wrap-up/",
	"title": "Wrap-up",
	"tags": [],
	"description": "",
	"content": " Stay in touch Add this website to your bookmarks Contact us at our emails: Did you get stuck in one of your commands while practicing with this website?\n Natty\u0026rsquo;s e-mail  Andre\u0026rsquo;s e-mail "
},
{
	"uri": "https://bioinformatics.netlify.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://bioinformatics.netlify.com/credits/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": " Contributors Thanks to them  for taking the time to teach bioinformatics. You can check the project\u0026rsquo;s github page by clicking here\n.ghContributors{ display:flex; flex-flow: wrap; align-content: flex-start } .ghContributors  div{ width: 50% ; display: inline-flex; margin-bottom: 5px; } .ghContributors  div label{ padding-left: 4px ; } .ghContributors  div span{ font-size: x-small; padding-left: 4px ; font-weight: bold; } #codelines{ font-size: x-small; padding-left: 4px ; color: green; }   Packages and libraries  mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; horsey - Progressive and customizable autocomplete component clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support  "
},
{
	"uri": "https://bioinformatics.netlify.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]